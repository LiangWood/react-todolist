{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","contents","isCompleted","todos","setTodos","createTodoAtIndex","e","i","newTodos","splice","setTimeout","document","forms","elements","focus","removeTodoAtIndex","length","slice","concat","className","src","logo","alt","map","todo","onClick","index","temporaryTodos","toggleTodoCompleteAtIndex","type","value","onKeyDown","key","preventDefault","handleKeyDown","onChange","target","updateTodoAtIndex","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uGAAAA,EAAOC,QAAU,IAA0B,kC,wLC2F5BC,G,MAvFH,WAAO,IAAD,EAEUC,mBAAS,CACjC,CACIC,SAAU,sBACVC,aAAa,GAEjB,CACID,SAAU,cACVC,aAAa,GAEjB,CACID,SAAU,4BACVC,aAAa,KAbH,mBAETC,EAFS,KAEFC,EAFE,KA2BVC,EAAoB,SAACC,EAAGC,GAC1B,IAAMC,EAAQ,YAAOL,GACrBK,EAASC,OAAOF,EAAE,EAAG,EAAG,CACpBN,SAAU,GACVC,aAAa,IAEjBE,EAASI,GACTE,YAAW,WACPC,SAASC,MAAM,GAAGC,SAASN,EAAE,GAAGO,UACjC,IASDC,EAAoB,SAACR,GAChB,IAANA,GAA4B,IAAjBJ,EAAMa,SACpBZ,GAAU,SAAAD,GAAK,OAAIA,EAAMc,MAAM,EAAGV,GAAGW,OAAOf,EAAMc,MAAMV,EAAI,EAAGJ,EAAMa,YACrEN,YAAW,WACPC,SAASC,MAAM,GAAGC,SAASN,EAAE,GAAGO,UACjC,KASL,OACE,yBAAKK,UAAU,OACb,yBAAKA,UAAU,UACb,yBAAKC,IAAKC,IAAMF,UAAU,OAAOG,IAAI,UAEvC,0BAAMH,UAAU,aACZ,4BACKhB,EAAMoB,KAAI,SAACC,EAAMjB,GAAP,OACT,yBAAKY,UAAS,eAAUK,EAAKtB,aAAe,sBACxC,yBAAKiB,UAAW,WAAYM,QAAU,kBAftB,SAACC,GACjC,IAAMC,EAAc,YAAOxB,GAC3BwB,EAAeD,GAAOxB,aAAeyB,EAAeD,GAAOxB,YAC3DE,EAASuB,GAYmDC,CAA0BrB,KACjEiB,EAAKtB,aACN,yCAGJ,2BACI2B,KAAK,OACLC,MAAON,EAAKvB,SACZ8B,UAAY,SAAAzB,GAAC,OA3Db,SAACA,EAAGC,GAIxB,GAHa,UAAVD,EAAE0B,KACD3B,EAAkBC,EAAGC,GAEZ,cAAVD,EAAE0B,KAA6C,KAAtB7B,EAAMI,GAAGN,SAEjC,OADAK,EAAE2B,iBACKlB,EAAkBR,GAqDQ2B,CAAc5B,EAAEC,IACjC4B,SAAW,SAAA7B,GAAC,OAtCR,SAACA,EAAGC,GAC1B,IAAMC,EAAQ,YAAOL,GACrBK,EAASD,GAAGN,SAAWK,EAAE8B,OAAON,MAChC1B,EAASI,GAmCyB6B,CAAkB/B,EAAEC,eCrExC+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASjC,SAASkC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.750b2e36.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nconst App = () => {\n\n  const [todos, setTodos] = useState([\n    {\n        contents: 'Pickup dry cleaning',\n        isCompleted: true\n    },\n    {\n        contents: 'Get haircut',\n        isCompleted: false\n    },\n    {\n        contents: 'Build a todo app in React',\n        isCompleted: false\n    }\n  ])\n  \n  const handleKeyDown = (e, i) => {\n    if(e.key === 'Enter') {\n        createTodoAtIndex(e, i)\n    }\n    if(e.key === 'Backspace' && todos[i].contents === '') {\n        e.preventDefault();\n        return removeTodoAtIndex(i)\n    }\n  }\n\n  const createTodoAtIndex = (e, i) => {\n      const newTodos = [...todos]\n      newTodos.splice(i+1, 0, {\n          contents: '',\n          isCompleted: false\n      })\n      setTodos(newTodos)\n      setTimeout(() => {\n          document.forms[0].elements[i+1].focus()\n      }, 0)\n  }\n\n  const updateTodoAtIndex = (e, i) => {\n      const newTodos = [...todos]\n      newTodos[i].contents = e.target.value\n      setTodos(newTodos)\n  }\n\n  const removeTodoAtIndex = (i) => {\n    if(i === 0 && todos.length === 1) return\n    setTodos( todos => todos.slice(0, i).concat(todos.slice(i + 1, todos.length)))\n    setTimeout(() => {\n        document.forms[0].elements[i-1].focus()\n    }, 0)\n  }\n\n  const toggleTodoCompleteAtIndex = (index) => {\n    const temporaryTodos = [...todos];\n    temporaryTodos[index].isCompleted = !temporaryTodos[index].isCompleted;\n    setTodos(temporaryTodos);\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n        <img src={logo} className=\"logo\" alt=\"logo\" />\n      </div>\n      <form className=\"todo-list\">\n          <ul>\n              {todos.map((todo, i) => (\n                <div className={`todo ${todo.isCompleted && 'todo-is-completed'}`}>\n                    <div className={'checkbox'} onClick={ () => toggleTodoCompleteAtIndex(i) }>\n                        {todo.isCompleted && (\n                        <span>&#x2714;</span>\n                        )}\n                    </div>\n                    <input \n                        type=\"text\" \n                        value={todo.contents}\n                        onKeyDown={ e => handleKeyDown(e,i) }\n                        onChange={ e => updateTodoAtIndex(e,i) }\n                    />\n                </div>\n              ))}\n          </ul>\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}